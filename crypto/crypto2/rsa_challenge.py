from secret import flag
from Crypto.Util.number import bytes_to_long,getPrime
import libnum
# 阅读代码的能力也是必须的哦
flag1 = flag[:len(flag)//2]
flag2 = flag[len(flag)//2:]

m1 = bytes_to_long(flag1)
m2 = bytes_to_long(flag2)


def challenge1(m):
    p = getPrime(1024)
    q = getPrime(1024)
    e = 3
    n = p*q
    c = pow(m,e,n)
    print ("n1=",n)
    print ("e1=",e)
    print ("c1=",c)

def challenge2(m):
    p = getPrime(1024)
    q = getPrime(1024)
    n = p*q
    phi_n = (p-1)*(q-1)
    while True:
        d = getPrime(256)
        if (libnum.gcd(d, phi_n) == 1 and 36 * pow(d, 4) < n):
            break
    e = libnum.invmod(d,phi_n)
    c = pow(m,e,n)
    print ("n2=",n)
    print ("e2=",e)
    print ("c2=",c)


challenge1(m1)
"""
n1= 17794322651985244360398798297236427197573099919777514390150548716043011554909472386538419547646479217198212860392441088306482436079057597017673282668575104805696280644632851112533403306674446415017207139655032895492883126061112607345051218406669295154148958166274223016727551462902566417623047515071725277952574163061484432382823360998093917106149223318057791276272014868197026724133570608265590284050526460086825829070086760617092472050523406342180114072290933789764539189990961852638276421000034476472644757648042472764152115642143975454219099357466733210241984509297458075644727434818666677787414405014312485796877
e1= 3
c1= 1677407691835378198546657984223033477067493258850917927258352885520853732106150834607491649923038875268749604055578354093790916134845045758103489513761
"""
challenge2(m2)
"""
n2= 28764801891789630496158814107080280277129502361885222750082931951763197520627874705493345391184359108052978734919530375982818388373339206160218665275185601487103229570607819926113211153276542794365361104430082886339857276733492860339158729793976251480644019363618395047922069151455888530980320799065099543029094821092174328932901892049723862108644692248879129903763321885608879912420989261553280584980567748492711574994986214234350421900028706698190893297507027399412244052287754949432571827799437153212833094683689783752996417279952432942753568479754941623066905711324867955960167005070199455435147452836309126906689
e2= 704703041144161577012087456962842558336673764999654897668687010636927707025602054444354219778297700025759519613233509979555365795481578339351421529962881828041145966504800164692212600548676492959357409580016951536391396052780299206338725968939324161070771908294718717256193742456675415335048405717976288953597614820809458361599091353315706929802591235336969094270784765619059768027279430682498525232895575015433173059620825639441417362939309239535120311284043598713270951064688241406088374817444860613773911719770085809168462743751201411017304148214621214323182377222124862116850365217134192566868062790147116360325  
c2= 3866285343510070083843161056507294375390716979334211957925424967972852907319726974524439549790432648684090478346561160514189492737204174375363568105167990348408074584350091709078165069987747442114703962691664627250544741977495737664347880190406218395917102999140628020486151094186478587531410396120883481857200470129442887105515526164873980943607492720026927216851742181529233646089914113373499946092277370990871673101990023285241588799357977463021397782746204431918110203057893107358565558349933724569763816796275443109700621987152070902253447675368970939979877470783869101009631358741569724263427019402694253315975
"""
